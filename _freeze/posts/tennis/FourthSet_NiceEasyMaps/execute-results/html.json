{
  "hash": "3318e587bff12391a6e2d4e400eefb59",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Fourth Set: Nice, Easy Mapping'\ndate: '2024-09-05'\ncategories: ['R', 'Geospatial','New Zealand']\ndescription: 'In this post, I try out a really easy way to make a nice minimalist map based on a set of coordinates.'\nauthor: 'Steven Turnbull'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\nformat:\n  html:\n    code-fold: show\n    code-tools: true\n---\n\n\n\n# Mapping made easy!\n\nIn a [previous post](https://sturbull.github.io./posts/tennis/FirstSet_Webscraping_and_GeoCoding.html) I outlined how we can take a set of addresses scraped from Tennis NZs [website](https://tennis.kiwi/play/play-tennis/) and geocode them to get latitude and longitude coordinates. I've tried out a bunch of different techniques to analyse this dataset, including [drive isodistances](https://sturbull.github.io./posts/tennis/SecondSet_Drive_Isodistances.html) and [point density mapping](https://sturbull.github.io./posts/tennis/ThirdSet_Point_Density_Mapping.html)\n\nIn this post, I'll be testing out a really easy way to make a map based on a set of coordinates, inspired by [this LinkedIn post by Isaac Bain](https://www.linkedin.com/posts/isaac-bain-4a0227172_nz-city-maps-ugcPost-7233959582157418497-StEs?utm_source=share&utm_medium=member_desktop). In this post, Isaac shows how we can use the [`rcityviews`](https://github.com/koenderks/rcityviews) package to take a set of coordinates and feed them into the `rcityviews::cityview()` function to return a nice map. \n\nLets take the first 6 tennis club addresses of set we scraped earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(dplyr)\nlibrary(reactable)\ndf <- read.csv(here(\"inputs\",\"tennis\",\"tennis_coords.csv\"))\n\n#We know the geocoding failed on some addresses, so we'll exclude those\ndf_clean <- df |>\n  filter(!is.na(latitude) | !is.na(longitude)) |>\n  head()\n\ndf_clean |> \n  reactable(\n    bordered = TRUE,\n    highlight = TRUE\n  ) \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-cb7fa0eca66b9c37a61c\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cb7fa0eca66b9c37a61c\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"name\":[\"Next Generation Auckland Domain\",\"Pompallier Lawn Tennis Club\",\"Ngatira Tennis Club\",\"Gladstone Tennis Club\",\"Herne Bay Ponsonby Rackets Club\",\"Mt Eden Tennis Club\"],\"storepoint_address\":[\"1 Tennis Lane Parnell, Auckland,  1010, New Zealand\",\"11 Green Street Ponsonby,  1011, New Zealand\",\"24 Clive Road Mount Eden,  1024, New Zealand\",\"120 Gladstone Road Parnell, Auckland,  1052, New Zealand\",\"10 West End Road Herne Bay,  1022, New Zealand\",\"22 Poronui Street Mount Eden,  1024, New Zealand\"],\"latitude\":[-36.8543941,-36.8461653,-36.8728163,-36.8496888,-36.8494279,-36.8832081],\"longitude\":[174.7723731,174.7464657,174.7663288,174.7858216,174.7303048,174.7649894]},\"columns\":[{\"id\":\"name\",\"name\":\"name\",\"type\":\"character\"},{\"id\":\"storepoint_address\",\"name\":\"storepoint_address\",\"type\":\"character\"},{\"id\":\"latitude\",\"name\":\"latitude\",\"type\":\"numeric\"},{\"id\":\"longitude\",\"name\":\"longitude\",\"type\":\"numeric\"}],\"highlight\":true,\"bordered\":true,\"dataKey\":\"c696adcc55735c3f21083957d5b8f0fd\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThen, it's super straight forward to make a map! Here's the code for a single address. Simply use the `new_city` function to set the centre location of our map to our desired coordinates, and then use the `cityview` function to render the image. the `rcityviews` package does all of the hard work of connecting to OpenStreetMap and pulling the map data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rcityviews)\n\n # Create a new city object\ncity <- new_city(\n  name = df$name[1],\n  country = \"New Zealand\",\n  lat = df$latitude[1],\n  long = df$longitude[1]\n)\n\np <- cityview(\n  name = city,\n  zoom = 4, #we'll set the zoom a bit closer so we can see the courts. \n  license = FALSE,\n  theme = 'modern',\n  filename=here(\"example_nice_map.png\")\n)\n\nprint(p)\n```\n:::\n\n\n\n![Example nice map. Hopefully we can see the tennis courts dead centre.](./example_nice_map.png){fig-align=\"center\" height=90% width=90%}\n\nAnd here's the code for running through our set of addresses. We can set our own style for the maps manually. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set theme for map appearance\nmyTheme <- list(\n  colors = list(\n   \"background\" = \"#e6ddd6\",\n      \"water\" = \"#656c7c\",\n      \"landuse\" = \"#7c9c6b\",\n      \"contours\" = \"#e6ddd6\",\n      \"streets\" = \"#fafafa\",\n      \"rails\" = c(\"#fafafa\", \"#e6ddd6\"),\n      \"buildings\" = \"#eb3e20\",\n      \"text\" = \"#000000\",\n      \"waterlines\" = \"#656c7c\"\n  ),\n  font = list(\n    \"family\" = \"Imbue\",\n      \"face\" = \"plain\",\n      \"scale\" = 3\n  ),\n  size = list(\n    borders = list(\n      contours = 0.15,\n      water = 0.4,\n      canal = 0.5,\n      river = 0.6\n    ),\n    streets = list(\n      path = 0.2,\n      residential = 0.3,\n      structure = 0.35,\n      tertiary = 0.4,\n      secondary = 0.5,\n      primary = 0.6,\n      motorway = 0.8,\n      rails = 0.65,\n      runway = 3\n    )\n  )\n)\n\n# Loop through each tennis club address\nfor (i in 1:nrow(df_clean)) {\n  # Extract tennis club details\n  name <- df_clean$name[i]\n  lat <- df_clean$latitude[i]\n  long <- df_clean$longitude[i]\n\n  # Create a new city object\n  city <- new_city(\n    name = name,\n    country = \"New Zealand\",\n    lat = lat,\n    long = long\n    )\n\n# Produce the cityview\n  p <- cityview(\n    name = city,\n    zoom = 4,\n    license = FALSE,\n    theme = myTheme\n    )\n  \n  output_filename <- here('inputs','tennis','maps',paste0(name,\".png\"))\n\n  ggsave(\n    filename = output_filename,\n    plot = p,\n    height = 500,\n    width = 500,\n    units = \"mm\",\n    dpi = 300\n    )\n}\n```\n:::\n\n\n\nAnd here's the result! \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](FourthSet_NiceEasyMaps_files/figure-html/unnamed-chunk-3-1.png){width=1920}\n:::\n:::\n\n\n\nA very easy to use library that has awesome options for styling the maps!",
    "supporting": [
      "FourthSet_NiceEasyMaps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-2.0.0/react-tools.umd.cjs\"></script>\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}